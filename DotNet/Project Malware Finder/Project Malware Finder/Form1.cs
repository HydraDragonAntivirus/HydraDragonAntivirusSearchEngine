using log4net.Config;
using System.Collections.Concurrent;
using System.Net;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Project_Malware_Finder
{
    public partial class Form1 : Form
    {
        // File lists for scanning and whitelist.
        private readonly List<string> malwareFiles = new List<string>();
        private readonly List<string> ddosFiles = new List<string>();
        private readonly List<string> phishingFiles = new List<string>();
        private readonly List<string> whitelistFiles = new List<string>();
        private string lastPath = "";

        // Scanner instance – created when the user clicks Start Scan.
        private Scanner? scanner;
        // Cancellation token source to allow stopping the scan.
        CancellationTokenSource? cts;
        // A full log list to support search and saving.
        private readonly List<string> fullLogList = new List<string>();

        public Form1()
        {
            InitializeComponent();
            XmlConfigurator.Configure();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Set default settings – these values are user-configurable in the UI.
            textBoxMaxDepth.Text = "10";
            textBoxMaxThreads.Text = "100";
            textBoxCsvMaxLines.Text = "10000"; // Maximum lines (including header)
            textBoxCsvMaxSize.Text = "2097152"; // 2 MB in bytes
            textBoxOutputFile.Text = "BulkReport.csv";
            textBoxWhitelistOutputFile.Text = "WhitelistReport.csv";

            textBoxCategoryMalicious.Text = "20";
            textBoxCategoryPhishing.Text = "7";
            textBoxCategoryDdos.Text = "18";
            textBoxCategoryBenign.Text = ""; // empty for benign
            textBoxCommentTemplate.Text = "Related with ip address detected by heuristics of https://github.com/HydraDragonAntivirus/HydraDragonAntivirusSearchEngine (Source IP: {ip}, Source URL: {source_url}, Discovered URL: {discovered_url}, Verdict: {verdict})";
        }

        #region Event Handlers (as referenced in Designer)

        // Call this method to save current settings to a JSON file.
        private void SaveSettings(string filePath)
        {
            AppSettings settings = new AppSettings
            {
                MaxDepth = int.TryParse(textBoxMaxDepth.Text, out int depth) ? depth : 10,
                MaxThreads = int.TryParse(textBoxMaxThreads.Text, out int threads) ? threads : 100,
                CsvMaxLines = int.TryParse(textBoxCsvMaxLines.Text, out int lines) ? lines : 10000,
                CsvMaxSize = int.TryParse(textBoxCsvMaxSize.Text, out int size) ? size : 2097152,
                OutputFile = textBoxOutputFile.Text,
                WhitelistOutputFile = textBoxWhitelistOutputFile.Text,
                CategoryMalicious = textBoxCategoryMalicious.Text,
                CategoryPhishing = textBoxCategoryPhishing.Text,
                CategoryDdos = textBoxCategoryDdos.Text,
                CategoryBenign = textBoxCategoryBenign.Text,
                CommentTemplate = textBoxCommentTemplate.Text,

                RealTimeCsvBulk = checkBoxRealTimeCsvBulk.Checked,
                RealTimeCsvBulkFile = textBoxRealTimeCsvBulkFile.Text,
                RealTimeCsvWhitelist = checkBoxRealTimeCsvWhitelist.Checked,
                RealTimeCsvWhitelistFile = textBoxRealTimeCsvWhitelistFile.Text,
                RealTimeSave = checkBoxRealTimeSave.Checked,
                RealTimeFile = textBoxRealTimeFile.Text,
                ScanKnownActive = checkBoxScanKnownActive.Checked,

                // Save file lists
                MalwareFiles = malwareFiles,
                DdosFiles = ddosFiles,
                PhishingFiles = phishingFiles,
                WhitelistFiles = whitelistFiles,

                // Save last selected folder
                LastFolderPath = lastPath
            };

            string json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(filePath, json);
        }

        // Call this method to load settings from a JSON file and update the UI.
        private void LoadSettings(string filePath)
        {
            if (File.Exists(filePath))
            {
                string json = File.ReadAllText(filePath);
                AppSettings? settings = JsonSerializer.Deserialize<AppSettings>(json);
                if (settings != null)
                {
                    textBoxMaxDepth.Text = settings.MaxDepth.ToString();
                    textBoxMaxThreads.Text = settings.MaxThreads.ToString();
                    textBoxCsvMaxLines.Text = settings.CsvMaxLines.ToString();
                    textBoxCsvMaxSize.Text = settings.CsvMaxSize.ToString();
                    textBoxOutputFile.Text = settings.OutputFile;
                    textBoxWhitelistOutputFile.Text = settings.WhitelistOutputFile;
                    textBoxCategoryMalicious.Text = settings.CategoryMalicious;
                    textBoxCategoryPhishing.Text = settings.CategoryPhishing;
                    textBoxCategoryDdos.Text = settings.CategoryDdos;
                    textBoxCategoryBenign.Text = settings.CategoryBenign;
                    textBoxCommentTemplate.Text = settings.CommentTemplate;

                    checkBoxRealTimeCsvBulk.Checked = settings.RealTimeCsvBulk;
                    textBoxRealTimeCsvBulkFile.Text = settings.RealTimeCsvBulkFile;
                    checkBoxRealTimeCsvWhitelist.Checked = settings.RealTimeCsvWhitelist;
                    textBoxRealTimeCsvWhitelistFile.Text = settings.RealTimeCsvWhitelistFile;
                    checkBoxRealTimeSave.Checked = settings.RealTimeSave;
                    textBoxRealTimeFile.Text = settings.RealTimeFile;
                    checkBoxScanKnownActive.Checked = settings.ScanKnownActive;

                    // Restore file lists
                    malwareFiles.Clear();
                    malwareFiles.AddRange(settings.MalwareFiles);
                    ddosFiles.Clear();
                    ddosFiles.AddRange(settings.DdosFiles);
                    phishingFiles.Clear();
                    phishingFiles.AddRange(settings.PhishingFiles);
                    whitelistFiles.Clear();
                    whitelistFiles.AddRange(settings.WhitelistFiles);

                    listBoxMalware.Items.Clear();
                    listBoxMalware.Items.AddRange(settings.MalwareFiles.ToArray());
                    listBoxDdos.Items.Clear();
                    listBoxDdos.Items.AddRange(settings.DdosFiles.ToArray());
                    listBoxPhishing.Items.Clear();
                    listBoxPhishing.Items.AddRange(settings.PhishingFiles.ToArray());
                    listBoxWhitelist.Items.Clear();
                    listBoxWhitelist.Items.AddRange(settings.WhitelistFiles.ToArray());

                    // Restore the last selected folder
                    lastPath = settings.LastFolderPath;
                }
            }
        }

        // Event handler for the "Save Settings" button.
        private void btnSaveSettings_Click(object sender, EventArgs e)
        {
            SaveFileDialog sfd = new SaveFileDialog
            {
                Filter = "JSON Files|*.json"
            };
            if (sfd.ShowDialog() == DialogResult.OK)
            {
                SaveSettings(sfd.FileName);
                MessageBox.Show("Settings saved successfully.");
            }
        }

        // Event handler for the "Load Settings" button.
        private void btnLoadSettings_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog
            {
                Filter = "JSON Files|*.json"
            };
            if (ofd.ShowDialog() == DialogResult.OK)
            {
                LoadSettings(ofd.FileName);
                MessageBox.Show("Settings loaded successfully.");
            }
        }

        // Start Scan button clicked.
        private async void button1_Click(object sender, EventArgs e)
        {
            // Read settings from UI controls.
            if (!int.TryParse(textBoxMaxDepth.Text, out int maxDepth))
                maxDepth = 10;
            if (!int.TryParse(textBoxMaxThreads.Text, out int maxThreads))
                maxThreads = 100;
            if (!int.TryParse(textBoxCsvMaxLines.Text, out int csvMaxLines))
                csvMaxLines = 10000;
            if (!int.TryParse(textBoxCsvMaxSize.Text, out int csvMaxSize))
                csvMaxSize = 2097152;

            string outputFileName = textBoxOutputFile.Text;
            string whitelistOutputFileName = textBoxWhitelistOutputFile.Text;
            string categoryMalicious = textBoxCategoryMalicious.Text;
            string categoryPhishing = textBoxCategoryPhishing.Text;
            string categoryDdos = textBoxCategoryDdos.Text;
            string categoryBenign = textBoxCategoryBenign.Text;

            cts = new CancellationTokenSource();

            string commentTemplate = textBoxCommentTemplate.Text;

            // Initialize real‑time Bulk CSV file with header if enabled.
            if (checkBoxRealTimeCsvBulk.Checked && !string.IsNullOrEmpty(textBoxRealTimeCsvBulkFile.Text))
            {
                File.WriteAllText(textBoxRealTimeCsvBulkFile.Text, "IP,Categories,ReportDate,Comment" + Environment.NewLine);
            }
            // Initialize real‑time Whitelist CSV file with header if enabled.
            if (checkBoxRealTimeCsvWhitelist.Checked && !string.IsNullOrEmpty(textBoxRealTimeCsvWhitelistFile.Text))
            {
                File.WriteAllText(textBoxRealTimeCsvWhitelistFile.Text, "IP,Source,ReportDate,Comment" + Environment.NewLine);
            }

            bool scanKnownActive = checkBoxScanKnownActive.Checked;
            scanner = new Scanner(
                malwareFiles, ddosFiles, phishingFiles, whitelistFiles,
                maxDepth, maxThreads,
                categoryMalicious, categoryPhishing, categoryDdos, categoryBenign,
                csvMaxLines, csvMaxSize,
                outputFileName, whitelistOutputFileName,
                UpdateLog, UpdateProgress,
                AppendBulkCsvLineToFile, AppendWhitelistCsvLineToFile,
                commentTemplate,
                AddIPv4ToListBox,
                AddIPv6ToListBox);

            await scanner.StartScanAsync(cts.Token);

            // Validate main CSV limits.
            int totalLines = scanner.BulkCsvLines.Count;
            string csvContent = string.Join("\n", scanner.BulkCsvLines);
            int csvSizeInBytes = Encoding.UTF8.GetByteCount(csvContent);

            if (totalLines > csvMaxLines + 1) // +1 for header
            {
                MessageBox.Show("CSV output exceeds the maximum allowed number of lines (" + csvMaxLines + ").");
            }
            else if (csvSizeInBytes > csvMaxSize)
            {
                MessageBox.Show("CSV output exceeds the maximum allowed file size (" + csvMaxSize + " bytes).");
            }
            else
            {
                // Write both CSV outputs.
                File.WriteAllLines(outputFileName, scanner.BulkCsvLines, Encoding.UTF8);
                File.WriteAllLines(whitelistOutputFileName, scanner.WhitelistCsvLines, Encoding.UTF8);
                MessageBox.Show("Scan completed and CSV files generated successfully.");
            }
        }

        // Stop Scan button clicked.
        private void btnStopScan_Click(object sender, EventArgs e)
        {
            if (cts != null)
            {
                cts.Cancel();
                UpdateLog("Scan cancellation requested.");
            }
        }

        // Update IPv4 list box with the .txt file name.
        private void AddIPv4ToListBox(string fileName)
        {
            if (listBoxIPv4.InvokeRequired)
            {
                listBoxIPv4.Invoke(new Action(() => listBoxIPv4.Items.Add(fileName)));
            }
            else
            {
                listBoxIPv4.Items.Add(fileName);
            }
        }

        // Update IPv6 list box with the .txt file name.
        private void AddIPv6ToListBox(string fileName)
        {
            if (listBoxIPv6.InvokeRequired)
            {
                listBoxIPv6.Invoke(new Action(() => listBoxIPv6.Items.Add(fileName)));
            }
            else
            {
                listBoxIPv6.Items.Add(fileName);
            }
        }

        // Clear Log button clicked.
        private void btnClearLog_Click(object sender, EventArgs e)
        {
            listBoxLog.Items.Clear();
        }

        #region Malware List Handlers

        // "Select" malware file.
        private void button2_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog
            {
                Filter = "Text Files|*.txt",
                InitialDirectory = string.IsNullOrEmpty(lastPath) ? Environment.CurrentDirectory : lastPath
            };

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                string filePath = ofd.FileName;
                lastPath = Path.GetDirectoryName(filePath) ?? Environment.CurrentDirectory;
                malwareFiles.Add(filePath);
                listBoxMalware.Items.Add(filePath);
            }
        }

        // "Add" malware file (via text input).
        private void button3_Click(object sender, EventArgs e)
        {
            if (File.Exists(textBoxMalwareInput.Text))
            {
                if (textBoxMalwareInput.Text.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                {
                    listBoxMalware.Items.Add(textBoxMalwareInput.Text);
                    malwareFiles.Add(textBoxMalwareInput.Text);
                    textBoxMalwareInput.Clear();
                }
                else
                {
                    MessageBox.Show("File is not a txt file.");
                }
            }
            else
            {
                MessageBox.Show("File does not exist.");
            }
        }

        // "Delete Selected From Malware List" button.
        private void button6_Click(object sender, EventArgs e)
        {
            if (listBoxMalware.SelectedIndex >= 0)
            {
                int index = listBoxMalware.SelectedIndex;
                malwareFiles.RemoveAt(index);
                listBoxMalware.Items.RemoveAt(index);
            }
        }

        #endregion

        #region DDoS List Handlers

        // "Select" DDoS file.
        private void buttonSelectDdosFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog
            {
                Filter = "Text Files|*.txt",
                InitialDirectory = string.IsNullOrEmpty(lastPath) ? Environment.CurrentDirectory : lastPath
            };

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                string filePath = ofd.FileName;
                lastPath = Path.GetDirectoryName(filePath) ?? Environment.CurrentDirectory;
                ddosFiles.Add(filePath);
                listBoxDdos.Items.Add(filePath);
            }
        }

        // "Add" DDoS file (via text input).
        private void buttonAddDdosFile_Click(object sender, EventArgs e)
        {
            if (File.Exists(textBoxDdosInput.Text))
            {
                if (textBoxDdosInput.Text.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                {
                    listBoxDdos.Items.Add(textBoxDdosInput.Text);
                    ddosFiles.Add(textBoxDdosInput.Text);
                    textBoxDdosInput.Clear();
                }
                else
                {
                    MessageBox.Show("File is not a txt file.");
                }
            }
            else
            {
                MessageBox.Show("File does not exist.");
            }
        }

        // "Delete Selected From DDoS List" button.
        private void buttonDeleteDdosFile_Click(object sender, EventArgs e)
        {
            if (listBoxDdos.SelectedIndex >= 0)
            {
                int index = listBoxDdos.SelectedIndex;
                ddosFiles.RemoveAt(index);
                listBoxDdos.Items.RemoveAt(index);
            }
        }

        #endregion

        #region Phishing List Handlers

        // "Select" Phishing file.
        private void buttonSelectPhishingFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog
            {
                Filter = "Text Files|*.txt",
                InitialDirectory = string.IsNullOrEmpty(lastPath) ? Environment.CurrentDirectory : lastPath
            };

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                string filePath = ofd.FileName;
                lastPath = Path.GetDirectoryName(filePath) ?? Environment.CurrentDirectory;
                phishingFiles.Add(filePath);
                listBoxPhishing.Items.Add(filePath);
            }
        }

        // "Add" Phishing file (via text input).
        private void buttonAddPhishingFile_Click(object sender, EventArgs e)
        {
            if (File.Exists(textBoxPhishingInput.Text))
            {
                if (textBoxPhishingInput.Text.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                {
                    listBoxPhishing.Items.Add(textBoxPhishingInput.Text);
                    phishingFiles.Add(textBoxPhishingInput.Text);
                    textBoxPhishingInput.Clear();
                }
                else
                {
                    MessageBox.Show("File is not a txt file.");
                }
            }
            else
            {
                MessageBox.Show("File does not exist.");
            }
        }

        // "Delete Selected From Phishing List" button.
        private void buttonDeletePhishingFile_Click(object sender, EventArgs e)
        {
            if (listBoxPhishing.SelectedIndex >= 0)
            {
                int index = listBoxPhishing.SelectedIndex;
                phishingFiles.RemoveAt(index);
                listBoxPhishing.Items.RemoveAt(index);
            }
        }

        #endregion

        #region Whitelist List Handlers

        // "Select" whitelist file.
        private void button5_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog
            {
                Filter = "Text Files|*.txt",
                InitialDirectory = string.IsNullOrEmpty(lastPath) ? Environment.CurrentDirectory : lastPath
            };

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                string filePath = ofd.FileName;
                lastPath = Path.GetDirectoryName(filePath) ?? Environment.CurrentDirectory;
                whitelistFiles.Add(filePath);
                listBoxWhitelist.Items.Add(filePath);
            }
        }

        // "Add" whitelist file (via text input).
        private void button4_Click(object sender, EventArgs e)
        {
            if (File.Exists(textBoxWhitelistInput.Text))
            {
                if (textBoxWhitelistInput.Text.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                {
                    listBoxWhitelist.Items.Add(textBoxWhitelistInput.Text);
                    whitelistFiles.Add(textBoxWhitelistInput.Text);
                    textBoxWhitelistInput.Clear();
                }
                else
                {
                    MessageBox.Show("File is not a txt file.");
                }
            }
            else
            {
                MessageBox.Show("File does not exist.");
            }
        }

        // "Delete Selected From Whitelist" button.
        private void button7_Click(object sender, EventArgs e)
        {
            if (listBoxWhitelist.SelectedIndex >= 0)
            {
                int index = listBoxWhitelist.SelectedIndex;
                whitelistFiles.RemoveAt(index);
                listBoxWhitelist.Items.RemoveAt(index);
            }
        }

        #endregion

        #endregion

        #region UI Helper Methods

        // Thread-safe log updater.
        private bool realtimeLogErrorShown = false;

        private async void UpdateLog(string message)
        {
            string logEntry = $"{DateTime.Now}: {message}";
            fullLogList.Add(logEntry);  // Add the log entry to the fullLogList

            // Update the listBoxLog in a thread-safe manner.
            if (listBoxLog.InvokeRequired)
            {
                listBoxLog.Invoke(new Action(() => listBoxLog.Items.Add(logEntry)));
            }
            else
            {
                listBoxLog.Items.Add(logEntry);
            }

            // Append the log entry to the realtime log file if enabled.
            if (checkBoxRealTimeSave.Checked && !string.IsNullOrEmpty(textBoxRealTimeFile.Text))
            {
                const int maxRetries = 3;
                int attempt = 0;
                bool success = false;

                while (attempt < maxRetries && !success)
                {
                    try
                    {
                        await File.AppendAllTextAsync(textBoxRealTimeFile.Text, logEntry + Environment.NewLine);
                        success = true;
                    }
                    catch (Exception ex)
                    {
                        attempt++;
                        if (attempt >= maxRetries)
                        {
                            if (!realtimeLogErrorShown)
                            {
                                realtimeLogErrorShown = true;
                                if (listBoxLog.InvokeRequired)
                                {
                                    listBoxLog.Invoke(new Action(() => listBoxLog.Items.Add("Error saving realtime log: " + ex.Message)));
                                }
                                else
                                {
                                    listBoxLog.Items.Add("Error saving realtime log: " + ex.Message);
                                }
                            }
                        }
                        else
                        {
                            // Wait a short time before trying again.
                            await Task.Delay(100);
                        }
                    }
                }
            }
        }

        // Thread-safe progress updater.
        private void UpdateProgress(int current, int total)
        {
            if (progressBarScan.InvokeRequired)
            {
                progressBarScan.Invoke(new Action(() =>
                {
                    progressBarScan.Maximum = total;
                    progressBarScan.Value = current;
                    labelProgress.Text = $"{current} / {total}";
                }));
            }
            else
            {
                progressBarScan.Maximum = total;
                progressBarScan.Value = current;
                labelProgress.Text = $"{current} / {total}";
            }
        }

        private bool realtimeBulkCsvErrorShown = false;

        // Real-time appending for Bulk CSV lines.
        private void AppendBulkCsvLineToFile(string csvLine)
        {
            // Make sure checkBoxRealTimeCsvBulk and textBoxRealTimeCsvBulkFile exist on your form.
            if (checkBoxRealTimeCsvBulk.Checked && !string.IsNullOrEmpty(textBoxRealTimeCsvBulkFile.Text))
            {
                try
                {
                    File.AppendAllText(textBoxRealTimeCsvBulkFile.Text, csvLine + Environment.NewLine);
                }
                catch (Exception ex)
                {
                    if (!realtimeBulkCsvErrorShown)
                    {
                        realtimeBulkCsvErrorShown = true;
                        MessageBox.Show("Error saving Bulk CSV line: " + ex.Message, "Bulk CSV Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        // Updated AppendWhitelistCsvLineToFile method in Form1 with a locking mechanism:
        private readonly object whitelistCsvLock = new object();

        private void AppendWhitelistCsvLineToFile(string csvLine)
        {
            if (checkBoxRealTimeCsvWhitelist.Checked && !string.IsNullOrEmpty(textBoxRealTimeCsvWhitelistFile.Text))
            {
                lock (whitelistCsvLock)
                {
                    File.AppendAllText(textBoxRealTimeCsvWhitelistFile.Text, csvLine + Environment.NewLine);
                }
            }
        }

        #endregion

        #region Scanner and Helper Classes

        // Define a simple settings class.
        public class AppSettings
        {
            public int MaxDepth { get; set; }
            public int MaxThreads { get; set; }
            public int CsvMaxLines { get; set; }
            public int CsvMaxSize { get; set; }
            public string OutputFile { get; set; } = string.Empty;
            public string WhitelistOutputFile { get; set; } = string.Empty;
            public string CategoryMalicious { get; set; } = string.Empty;
            public string CategoryPhishing { get; set; } = string.Empty;
            public string CategoryDdos { get; set; } = string.Empty;
            public string CategoryBenign { get; set; } = string.Empty;
            public string CommentTemplate { get; set; } = string.Empty;
            public bool RealTimeCsvBulk { get; set; }
            public string RealTimeCsvBulkFile { get; set; } = string.Empty;
            public bool RealTimeCsvWhitelist { get; set; }
            public string RealTimeCsvWhitelistFile { get; set; } = string.Empty;
            public bool RealTimeSave { get; set; }
            public string RealTimeFile { get; set; } = string.Empty;
            public bool ScanKnownActive { get; set; }

            // File lists for scanning
            public List<string> MalwareFiles { get; set; } = new List<string>();
            public List<string> DdosFiles { get; set; } = new List<string>();
            public List<string> PhishingFiles { get; set; } = new List<string>();
            public List<string> WhitelistFiles { get; set; } = new List<string>();

            // Save the last selected folder
            public string LastFolderPath { get; set; } = string.Empty;
        }

        /// <summary>
        /// Scanner class:
        /// Loads seeds from files (from three lists), performs HTTP scans concurrently, recursively discovers IPs,
        /// and builds two CSV reports (one for bulk results and one for whitelisted IPs).
        /// </summary>
        public class Scanner
        {
            private readonly List<string> malwareFiles;
            private readonly List<string> ddosFiles;
            private readonly List<string> phishingFiles;
            private readonly List<string> whitelistFiles;
            private readonly int maxDepth;
            private readonly int maxThreads;
            private readonly string categoryMalicious;
            private readonly string categoryPhishing;
            private readonly string categoryDdos;
            private readonly string categoryBenign;
            private readonly int csvMaxLines;
            private readonly int csvMaxSize;
            private readonly string outputFileName;
            private readonly string whitelistOutputFileName;
            private readonly string commentTemplate;

            private readonly Action<string> logCallback;
            private readonly Action<int, int> progressCallback;

            public List<string> BulkCsvLines { get; private set; } = new List<string>();
            public List<string> WhitelistCsvLines { get; private set; } = new List<string>();

            // To store auto verdict IPs in memory
            private readonly HashSet<string> autoVerdictIPs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            // Concurrent collections for seeds
            private readonly ConcurrentQueue<Seed> seedQueue = new ConcurrentQueue<Seed>();
            private readonly ConcurrentDictionary<string, bool> processedIPs = new ConcurrentDictionary<string, bool>();

            // HashSet to store whitelisted IPs loaded from whitelist and blacklist files
            private readonly HashSet<string> whitelistedIPs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            private HashSet<string> blacklistIPs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            int totalSeeds = 0;
            int processedCount = 0;
            private readonly HttpClient httpClient = new HttpClient();

            private readonly Action<string> realTimeBulkCsvCallback;
            private readonly Action<string> realTimeWhitelistCsvCallback;
            private readonly Action<string> updateIPv4Callback;
            private readonly Action<string> updateIPv6Callback;
            private readonly HashSet<string> filesWithIPv4 = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            private readonly HashSet<string> filesWithIPv6 = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            private readonly object fileLock = new object();
            private readonly bool scanKnownActive;

            public Scanner(
                List<string> malwareFiles,
                List<string> ddosFiles,
                List<string> phishingFiles,
                List<string> whitelistFiles,
                int maxDepth,
                int maxThreads,
                string categoryMalicious,
                string categoryPhishing,
                string categoryDdos,
                string categoryBenign,
                int csvMaxLines,
                int csvMaxSize,
                string outputFileName,
                string whitelistOutputFileName,
                Action<string> logCallback,
                Action<int, int> progressCallback,
                Action<string> realTimeBulkCsvCallback,
                Action<string> realTimeWhitelistCsvCallback,
                string commentTemplate,
                Action<string> updateIPv4Callback,
                Action<string> updateIPv6Callback,
                bool scanKnownActive = false)
            {
                this.malwareFiles = malwareFiles;
                this.ddosFiles = ddosFiles;
                this.phishingFiles = phishingFiles;
                this.whitelistFiles = whitelistFiles;
                this.maxDepth = maxDepth;
                this.maxThreads = maxThreads;
                this.categoryMalicious = categoryMalicious;
                this.categoryPhishing = categoryPhishing;
                this.categoryDdos = categoryDdos;
                this.categoryBenign = categoryBenign;
                this.csvMaxLines = csvMaxLines;
                this.csvMaxSize = csvMaxSize;
                this.outputFileName = outputFileName;
                this.whitelistOutputFileName = whitelistOutputFileName;
                this.logCallback = logCallback;
                this.progressCallback = progressCallback;
                this.realTimeBulkCsvCallback = realTimeBulkCsvCallback;
                this.realTimeWhitelistCsvCallback = realTimeWhitelistCsvCallback;
                this.commentTemplate = commentTemplate ?? "Related with ip address detected by heuristics of https://github.com/HydraDragonAntivirus/HydraDragonAntivirusSearchEngine (Source IP: {ip}, Source URL: {source_url}, Discovered URL: {discovered_url}, Verdict: {verdict})";
                this.updateIPv4Callback = updateIPv4Callback;
                this.updateIPv6Callback = updateIPv6Callback;
                this.scanKnownActive = scanKnownActive;
            }

            private async Task ProcessWhitelistFileAsync(string file, CancellationToken token)
            {
                List<string> whitelistSites = new List<string>();

                // Read the file once.
                using (var reader = new StreamReader(file))
                {
                    string? line;
                    while ((line = await reader.ReadLineAsync()) is not null)
                    {
                        string trimmed = line.Trim();
                        if (string.IsNullOrEmpty(trimmed))
                            continue;

                        // If the line is a valid IP, add it directly.
                        if (IPAddress.TryParse(trimmed, out _))
                        {
                            lock (whitelistedIPs)
                            {
                                whitelistedIPs.Add(trimmed);
                            }
                        }
                        else
                        {
                            // Otherwise, treat it as a URL.
                            whitelistSites.Add(trimmed);
                        }
                    }
                }

                // Process each URL concurrently.
                var tasks = new List<Task>();
                using (var semaphore = new SemaphoreSlim(maxThreads))
                {
                    foreach (var url in whitelistSites)
                    {
                        // Ensure the URL is absolute.
                        string actualUrl = Uri.IsWellFormedUriString(url, UriKind.Absolute) ? url : "http://" + url;
                        await semaphore.WaitAsync(token);
                        tasks.Add(Task.Run(async () =>
                        {
                            try
                            {
                                var response = await httpClient.GetAsync(actualUrl, token);
                                if (response.IsSuccessStatusCode)
                                {
                                    string content = await response.Content.ReadAsStringAsync();
                                    var foundIPs = SeedHelper.ExtractIPAndPort(content);
                                    foreach (var (ip, port, version) in foundIPs)
                                    {
                                        // Check if the IP is in the blacklist.
                                        if (blacklistIPs.Contains(ip))
                                        {
                                            logCallback($"IP {ip} from whitelist site {actualUrl} is in the blacklist; skipping.");
                                            continue;
                                        }
                                        lock (whitelistedIPs)
                                        {
                                            if (!whitelistedIPs.Contains(ip))
                                            {
                                                whitelistedIPs.Add(ip);
                                                string reportDate = DateTime.UtcNow.ToString("o");
                                                string comment = $"Whitelist site visited: {actualUrl}";
                                                string csvLine = $"{ip},\"whitelist (visited)\",{reportDate},\"{EscapeCsvField(comment)}\"";
                                                lock (WhitelistCsvLines)
                                                {
                                                    if (WhitelistCsvLines.Count < csvMaxLines + 1)
                                                    {
                                                        WhitelistCsvLines.Add(csvLine);
                                                    }
                                                }
                                                realTimeWhitelistCsvCallback?.Invoke(csvLine);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    logCallback($"Failed to visit whitelist site: {actualUrl} Status: {response.StatusCode}");
                                }
                            }
                            catch (Exception ex)
                            {
                                logCallback($"Error visiting whitelist site: {actualUrl} Exception: {ex.Message}");
                            }
                            finally
                            {
                                semaphore.Release();
                            }
                        }, token));
                    }
                    await Task.WhenAll(tasks);
                }
            }

            public async Task StartScanAsync(CancellationToken token)
            {
                // Process each whitelist file.
                foreach (var file in whitelistFiles.Where(file => Path.GetExtension(file)
                         .Equals(".txt", StringComparison.OrdinalIgnoreCase)))
                {
                    await ProcessWhitelistFileAsync(file, token);
                }

                // Load seeds from blacklist files. This will also populate blacklistIPs.
                await LoadSeedsFromFileListAsync(malwareFiles, "malicious", token);
                await LoadSeedsFromFileListAsync(ddosFiles, "ddos", token);
                await LoadSeedsFromFileListAsync(phishingFiles, "phishing", token);

                totalSeeds = seedQueue.Count;
                progressCallback(processedCount, totalSeeds);

                List<Task> workers = new List<Task>();
                for (int i = 0; i < maxThreads; i++)
                {
                    workers.Add(Task.Run(() => WorkerAsync(token), token));
                }
                await Task.WhenAll(workers);
                logCallback("Scanning completed. Processed " + processedCount + " seeds.");
            }

            /// <summary>
            /// Loads seeds from each file in the provided list.
            /// If an IP is already whitelisted, it is recorded in the whitelist CSV.
            /// Otherwise, a new seed is enqueued for scanning.
            /// </summary>
            private async Task LoadSeedsFromFileListAsync(List<string> fileList, string defaultSourceType, CancellationToken token)
            {
                var ipv4Regex = new Regex(@"^(?<ip>(?:[0-9]{1,3}\.){3}[0-9]{1,3})(?::(?<port>[0-9]{1,5}))?", RegexOptions.Compiled);
                var ipv6Regex = new Regex(@"^(?<ip>(?:[A-Fa-f0-9]{1,4}:){2,7}[A-Fa-f0-9]{1,4})(?::(?<port>[0-9]{1,5}))?", RegexOptions.Compiled);

                foreach (var file in fileList.Where(file => Path.GetExtension(file).Equals(".txt", StringComparison.OrdinalIgnoreCase)))
                {
                    if (token.IsCancellationRequested)
                        return;

                    logCallback($"Loading file: {file}");
                    using (var sr = new StreamReader(file))
                    {
                        string? line;
                        while ((line = await sr.ReadLineAsync()) is not null)
                        {
                            if (token.IsCancellationRequested)
                                break;

                            string trimmed = line.Trim();
                            if (string.IsNullOrEmpty(trimmed))
                                continue;

                            // Process each line immediately.
                            Match ipv4Match = ipv4Regex.Match(trimmed);
                            if (ipv4Match.Success)
                            {
                                string ip = ipv4Match.Groups["ip"].Value;
                                // Add to the global blacklist set.
                                blacklistIPs.Add(ip);
                                await ProcessMatch(ipv4Match, "ipv4", file, trimmed, defaultSourceType);
                            }
                            else
                            {
                                Match ipv6Match = ipv6Regex.Match(trimmed);
                                if (ipv6Match.Success)
                                {
                                    string ip = ipv6Match.Groups["ip"].Value;
                                    blacklistIPs.Add(ip);
                                    await ProcessMatch(ipv6Match, "ipv6", file, trimmed, defaultSourceType);
                                }
                            }
                        }
                    }
                    logCallback($"Finished loading file: {file}");
                }
            }

            /// <summary>
            /// Processes a regex match by checking if the IP is already whitelisted.
            /// If yes, writes to the whitelist CSV; otherwise, enqueues a new seed for scanning.
            /// </summary>
            private async Task ProcessMatch(Match match, string version, string file, string trimmed, string defaultSourceType)
            {
                string ip = match.Groups["ip"].Value;
                int? port = match.Groups["port"].Success ? (int?)int.Parse(match.Groups["port"].Value) : null;

                // Ensure the IP is processed only once.
                if (!processedIPs.TryAdd(ip, true))
                    return;

                string fileName = Path.GetFileName(file);
                if (version.Equals("ipv4", StringComparison.OrdinalIgnoreCase))
                {
                    lock (fileLock)
                    {
                        if (!filesWithIPv4.Contains(fileName))
                        {
                            filesWithIPv4.Add(fileName);
                            updateIPv4Callback?.Invoke(fileName);
                        }
                    }
                }
                else if (version.Equals("ipv6", StringComparison.OrdinalIgnoreCase))
                {
                    lock (fileLock)
                    {
                        if (!filesWithIPv6.Contains(fileName))
                        {
                            filesWithIPv6.Add(fileName);
                            updateIPv6Callback?.Invoke(fileName);
                        }
                    }
                }

                bool isWhitelisted = whitelistedIPs.Contains(ip);
                if (isWhitelisted)
                {
                    string reportDate = DateTime.UtcNow.ToString("o");
                    string comment = $"Whitelisted from file: {file}";
                    string csvLine = $"{ip},\"whitelist\",{reportDate},\"{EscapeCsvField(comment)}\"";
                    lock (WhitelistCsvLines)
                    {
                        if (WhitelistCsvLines.Count < csvMaxLines + 1)
                        {
                            WhitelistCsvLines.Add(csvLine);
                        }
                    }
                    realTimeWhitelistCsvCallback?.Invoke(csvLine);
                }
                else
                {
                    // If scanKnownActive is false, adjust discoveredUrl so that it differs from source URL and file lists.
                    string discoveredUrl;
                    if (!scanKnownActive)
                    {
                        discoveredUrl = trimmed + "_discovered";
                        while (malwareFiles.Contains(discoveredUrl) ||
                               ddosFiles.Contains(discoveredUrl) ||
                               phishingFiles.Contains(discoveredUrl) ||
                               whitelistFiles.Contains(discoveredUrl))
                        {
                            discoveredUrl += "_x";
                        }
                    }
                    else
                    {
                        discoveredUrl = trimmed;
                    }
                    seedQueue.Enqueue(new Seed(ip, defaultSourceType, version, port, 1, trimmed, discoveredUrl));
                }
                await Task.CompletedTask;
            }

            private void EnqueueSeed(Seed seed)
            {
                if (processedIPs.TryAdd(seed.IP, true))
                {
                    seedQueue.Enqueue(seed);
                }
            }

            private async Task WorkerAsync(CancellationToken token)
            {
                while (!token.IsCancellationRequested)
                {
                    if (seedQueue.TryDequeue(out Seed? seed) && seed is not null)
                    {
                        await ProcessSeedAsync(seed, token);
                        processedCount++;
                        progressCallback(processedCount, totalSeeds);
                    }
                    else
                    {
                        break;
                    }
                }
            }

            public async Task ProcessSeedAsync(Seed seed, CancellationToken token)
            {
                if (seed.Depth > maxDepth)
                    return;

                string url = seed.GetUrl();
                logCallback("Processing: " + url);

                try
                {
                    var response = await httpClient.GetAsync(url, token);
                    if (!response.IsSuccessStatusCode)
                    {
                        logCallback($"Failed: {url} Status: {response.StatusCode}");
                        return;
                    }

                    string content = await response.Content.ReadAsStringAsync();
                    if (string.IsNullOrEmpty(content))
                        return;

                    logCallback("Visited: " + url);
                    string category = seed.SourceType switch
                    {
                        "malicious" => categoryMalicious,
                        "phishing" => categoryPhishing,
                        "ddos" => categoryDdos,
                        _ => string.IsNullOrWhiteSpace(categoryBenign) ? "benign" : categoryBenign
                    };
                    string reportDate = DateTime.UtcNow.ToString("o");
                    string comment = commentTemplate
                        .Replace("{ip}", seed.IP)
                        .Replace("{source_url}", seed.OriginalSourceUrl)
                        .Replace("{discovered_url}", seed.DiscoveredUrl)
                        .Replace("{verdict}", seed.SourceType);

                    if (comment.Length > 1024)
                    {
                        comment = comment.Substring(0, 1024);
                    }
                    string csvLine = $"{seed.IP},\"{category}\",{reportDate},\"{EscapeCsvField(comment)}\"";
                    BulkCsvLines.Add(csvLine);
                    realTimeBulkCsvCallback?.Invoke(csvLine);

                    // When scanning further, pass the current page's URL as the discovered URL for child seeds.
                    if (seed.Depth < maxDepth)
                    {
                        var foundIPs = SeedHelper.ExtractIPAndPort(content);
                        var tasks = new List<Task>();
                        HashSet<string> processedIPSet = new HashSet<string>(processedIPs.Keys);
                        foreach (var (ip, port, version) in foundIPs)
                        {
                            if (!processedIPSet.Contains(ip))
                            {
                                tasks.Add(ProcessIPAsync(seed, ip, port, version, token, url));
                            }
                        }
                        await Task.WhenAll(tasks);
                    }
                }
                catch (Exception ex)
                {
                    logCallback("Error processing " + url + ": " + ex.Message);
                }
            }

            /// <summary>
            /// Processes newly discovered IPs on the scanned page.
            /// If scanKnownActive is enabled, checks if the IP is active.
            /// If the check fails, marks it as "benign (auto verdict)", writes to whitelist CSV, and stores it in memory.
            /// </summary>
            private async Task ProcessIPAsync(Seed seed, string ip, int? port, string version, CancellationToken token, string discoveredUrl)
            {
                // If scanKnownActive is not checked and the seed is from a malicious, phishing, or ddos source,
                // skip processing further discovered IPs.
                if (!scanKnownActive &&
                    (seed.SourceType.Equals("malicious", StringComparison.OrdinalIgnoreCase) ||
                     seed.SourceType.Equals("phishing", StringComparison.OrdinalIgnoreCase) ||
                     seed.SourceType.Equals("ddos", StringComparison.OrdinalIgnoreCase)))
                {
                    return;
                }

                // If the IP has already been processed, skip it.
                if (processedIPs.ContainsKey(ip))
                {
                    return;
                }

                string newSourceType = seed.SourceType;
                // Only perform the active check if the checkbox is enabled.
                bool shouldCheckActive = scanKnownActive;
                if (shouldCheckActive)
                {
                    bool active = await SeedHelper.IsActiveAndStaticAsync(ip, port ?? 0);
                    if (!active)
                    {
                        newSourceType = "benign (auto verdict)";
                        string reportDate = DateTime.UtcNow.ToString("o");
                        string comment = $"Auto-whitelisted benign IP from {seed.OriginalSourceUrl}";
                        string csvLine = $"{ip},\"whitelist\",{reportDate},\"{EscapeCsvField(comment)}\"";
                        lock (WhitelistCsvLines)
                        {
                            if (WhitelistCsvLines.Count < csvMaxLines + 1)
                            {
                                WhitelistCsvLines.Add(csvLine);
                            }
                        }
                        realTimeWhitelistCsvCallback?.Invoke(csvLine);
                        return;
                    }
                }

                // Enqueue a new seed for further scanning using the parent's OriginalSourceUrl and the current discovered URL.
                EnqueueSeed(new Seed(ip, newSourceType, version, port ?? 0, seed.Depth + 1, seed.OriginalSourceUrl, discoveredUrl));
            }

            private string EscapeCsvField(string field)
            {
                return field.Replace("\"", "\\\"");
            }
        }

        /// <summary>
        /// Helper class for IP validation and extraction.
        /// </summary>
        public static class SeedHelper
        {
            public static bool IsValidIP(string ip)
            {
                return IPAddress.TryParse(ip, out _);
            }

            public static List<(string ip, int? port, string version)> ExtractIPAndPort(string text)
            {
                List<(string ip, int? port, string version)> results = new List<(string, int?, string)>();

                string ipv4Pattern = @"\b(?<ip>(?:[0-9]{1,3}\.){3}[0-9]{1,3})(?::(?<port>[0-9]{1,5}))?\b";
                string ipv6Pattern = @"\b(?<ip>(?:[A-Fa-f0-9]{1,4}:){2,7}[A-Fa-f0-9]{1,4})(?::(?<port>[0-9]{1,5}))?\b";

                foreach (Match match in Regex.Matches(text, ipv4Pattern))
                {
                    string ip = match.Groups["ip"].Value;
                    int? port = match.Groups["port"].Success ? int.Parse(match.Groups["port"].Value) : (int?)null;
                    results.Add((ip, port, "ipv4"));
                }
                foreach (Match match in Regex.Matches(text, ipv6Pattern))
                {
                    string ip = match.Groups["ip"].Value;
                    int? port = match.Groups["port"].Success ? int.Parse(match.Groups["port"].Value) : (int?)null;
                    results.Add((ip, port, "ipv6"));
                }
                return results;
            }

            public static async Task<bool> IsActiveAndStaticAsync(string ip, int? port)
            {
                // Construct the URL using the given IP and port (if provided)
                string url = $"http://{ip}" + (port.HasValue ? $":{port.Value}" : "");

                try
                {
                    // Create a new HttpClient with a 5-second timeout.
                    using var httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(5) };

                    // Send the HTTP GET request. HttpClient follows redirects automatically.
                    HttpResponseMessage response = await httpClient.GetAsync(url);

                    // Check if the response status is 200 (OK)
                    if (!response.IsSuccessStatusCode)
                        return false;

                    // Use the null-conditional operator to safely access RequestUri.
                    Uri? finalUri = response.RequestMessage?.RequestUri;
                    if (finalUri == null)
                        return false;

                    string finalHostname = finalUri.Host;
                    // If the final port is not explicitly set, default to port 80.
                    int finalPort = finalUri.Port > 0 ? finalUri.Port : 80;
                    int expectedPort = port ?? 80;

                    // Verify that the final hostname is a valid IP and matches the original IP,
                    // and that the final port matches the expected port.
                    if (!string.IsNullOrEmpty(finalHostname) &&
                        IsValidIP(finalHostname) &&
                        finalHostname == ip &&
                        finalPort == expectedPort)
                    {
                        return true;
                    }
                    return false;
                }
                catch (Exception ex)
                {
                    // Optionally log the error
                    Console.Error.WriteLine($"Active/static check failed for {url}: {ex.Message}");
                    return false;
                }
            }
        }
        /// <summary>
        /// The Seed class holds data for an individual IP seed.
        /// </summary>
        // 1. Modify the Seed class to hold two URLs:
        public class Seed
        {
            public string IP { get; }
            public string SourceType { get; }
            public string Version { get; }
            public int? Port { get; }
            public int Depth { get; }
            // The original source where this IP was first encountered (e.g. from a file)
            public string OriginalSourceUrl { get; }
            // The URL of the page where this IP was discovered
            public string DiscoveredUrl { get; }

            public Seed(string ip, string sourceType, string version, int? port, int depth, string originalSourceUrl, string discoveredUrl)
            {
                IP = ip;
                SourceType = sourceType;
                Version = version;
                Port = port;
                Depth = depth;
                OriginalSourceUrl = originalSourceUrl;
                DiscoveredUrl = discoveredUrl;
            }

            public string GetUrl()
            {
                return Port.HasValue ? $"http://{IP}:{Port}" : $"http://{IP}";
            }
        }

        // Filters the log listbox based on the search term entered.
        private void textBoxSearch_TextChanged(object sender, EventArgs e)
        {
            string filter = textBoxSearch.Text.ToLowerInvariant();
            listBoxLog.Items.Clear();
            foreach (string entry in fullLogList)
            {
                if (entry.ToLowerInvariant().Contains(filter))
                {
                    listBoxLog.Items.Add(entry);
                }
            }
        }


        // Event handler for buttonSaveLog Click
        private void buttonSaveLog_Click(object sender, EventArgs e)
        {
            var sfd = new SaveFileDialog
            {
                Filter = "Text Files|*.txt"
            };

            if (sfd.ShowDialog() == DialogResult.OK)
            {
                File.WriteAllLines(sfd.FileName, fullLogList);
                MessageBox.Show("Log saved successfully.");
            }
        }

        #endregion

        private void tabPageSettings_Click(object sender, EventArgs e)
        {
            // Optional settings tab click handler.
        }
    }
}
